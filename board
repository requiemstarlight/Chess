from constants import *
import pygame


class Board:
    def __init__(self, window):
        self.window = window

        # create an list to manage locations of player pieces
        # 0. No piece 1. white pawn 2. white rook 3. white knight 4. white bishop 5. white queen 6. white king
        # 7. black pawn 8. black rook 9. black knight 10. black bishop 11. black queen 12. black king

        self.board = [
            [2, 3, 4, 5, 6, 4, 3, 2],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [7, 7, 7, 7, 7, 7, 7, 7],
            [8, 9, 10, 11, 12, 10, 9, 8]
        ]

    def draw_board(self):
        # method to draw the squares on the board

        for row in range(ROWS):
            if row % 2 == 0:
                for column in range(0, COLUMNS, 2):
                    pygame.draw.rect(self.window, BROWN, (column * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE,
                                                          SQUARE_SIZE))

                for column in range(1, COLUMNS, 2):
                    pygame.draw.rect(self.window, LIGHT_BROWN, (column * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE,
                                                                SQUARE_SIZE))

            else:
                for column in range(1, COLUMNS, 2):
                    pygame.draw.rect(self.window, BROWN, (column * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE,
                                                          SQUARE_SIZE))

                for column in range(0, COLUMNS, 2):
                    pygame.draw.rect(self.window, LIGHT_BROWN, (column * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE,
                                                                SQUARE_SIZE))

    def draw_bottom_display(self):
        # create method to draw the frame below the board - this will hold timers and player turn

        pygame.draw.rect(self.window, GREY, (0, (ROWS - 1) * SQUARE_SIZE, WIDTH, SQUARE_SIZE))
        pygame.draw.rect(self.window, CREAM, (DISPLAY_GAP, (ROWS - 1) * SQUARE_SIZE + DISPLAY_GAP,
                                              WIDTH - DISPLAY_GAP * 2, SQUARE_SIZE - DISPLAY_GAP * 2))
