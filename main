from constants import *
from game import Game

import pygame

pygame.init()
pygame.font.init()

# create display window
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Chess")

clock = pygame.time.Clock()


def main(mins):
    clock.tick(FPS)
    run = True

    game = Game(WIN, mins)

    win_text_timer = 20000

    while run:
        pygame.display.update()

        # create code to handle a three second countdown to display winner text

        if game.check_mated_king_location or game.out_of_time:
            if win_text_timer <= 0:
                run = False

            else:
                win_text_timer -= 1

        for event in pygame.event.get():

            if event.type == pygame.QUIT:
                run = False

            if event.type == pygame.MOUSEBUTTONDOWN and not game.check_mated_king_location:
                row, col = game.get_row_col_from_mouse_position()

                if row in range(ROWS - 1) and col in range(COLUMNS):
                    game.handle_player_selection(row, col)

        game.update_game()


# create a main menu where players can choose the length of game they want

def main_menu():
    image_side_length = 175

    # import and scale images of clocks on start screen

    five_mins = pygame.image.load('chess_images/5_mins_timer-removebg-preview.png')
    ten_mins = pygame.image.load('chess_images/10_mins-removebg-preview.png')
    thirty_mins = pygame.image.load('chess_images/30_mins-removebg-preview.png')

    five_scaled = pygame.transform.scale(five_mins, (image_side_length, image_side_length))
    ten_scaled = pygame.transform.scale(ten_mins, (image_side_length, image_side_length))
    thirty_scaled = pygame.transform.scale(thirty_mins, (image_side_length, image_side_length))

    five_min_start_point = (WIDTH / 5 - five_scaled.get_width() / 2, HEIGHT - 200)
    ten_min_start_point = (WIDTH / 2 - ten_scaled.get_width() / 2, HEIGHT - 200)
    thirty_min_start_point = (WIDTH - WIDTH / 5 - thirty_scaled.get_width() / 2, HEIGHT - 200)

    start_font = pygame.font.SysFont('gabriola', 60)

    clock_menu = pygame.time.Clock()

    run = True

    while run:

        clock_menu.tick(FPS)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False

            if event.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()

                if x in range(int(five_min_start_point[0] + 50), int(five_min_start_point[0] + image_side_length - 50)) \
                        and y in range(int(five_min_start_point[1] + 50),
                                       int(five_min_start_point[1] + image_side_length - 50)):
                    minutes = 5
                    WIN.fill(LIGHT_BROWN)
                    main(minutes)

                elif x in range(int(ten_min_start_point[0] + 50), int(ten_min_start_point[0] + image_side_length - 50)) \
                        and y in range(int(ten_min_start_point[1] + 50), int(ten_min_start_point[1] + image_side_length - 50)):
                    minutes = 10
                    WIN.fill(LIGHT_BROWN)
                    main(minutes)

                elif x in range(int(thirty_min_start_point[0] + 50), int(thirty_min_start_point[0] + image_side_length - 50)) \
                        and y in range(int(thirty_min_start_point[1] + 50),
                                       int(thirty_min_start_point[1] + image_side_length - 50)):
                    minutes = 30
                    WIN.fill(LIGHT_BROWN)
                    main(minutes)

        WIN.fill(LIGHT_BROWN)

        for row in range(ROWS):
            if row % 2 == 0:
                for col in range(0, COLUMNS, 2):
                    pygame.draw.rect(WIN, BROWN, (col * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))
            elif row % 2 == 1:
                for col in range(1, COLUMNS, 2):
                    pygame.draw.rect(WIN, BROWN, (col * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))

        starting_text = start_font.render("Click to play Chess", True, NAVY)
        WIN.blit(starting_text,
                 (WIDTH / 2 - starting_text.get_width() / 2, HEIGHT / 2 - starting_text.get_height() / 2))

        WIN.blit(five_scaled, five_min_start_point)
        WIN.blit(ten_scaled, ten_min_start_point)
        WIN.blit(thirty_scaled, thirty_min_start_point)

        pygame.display.update()

    pygame.quit()


if __name__ == '__main__':
    main_menu()
